#version 460 core
layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

uniform vec2 resolution;
uniform float time;
layout (rgba32f, binding = 0) uniform image2D screen;
layout (r32f, binding = 1) uniform image2D frame_counter;

#define SAMPLE_PER_PIXEL 4
#define MAX_SPHERES 16
#define MAX_BOUNCES 5
#define EPSILON 0.0001
#define MAX_FRAMES 256

// No includes in these files
#include "utils/math.glsl"
#include "utils/sdf_funcs.glsl"
#include "utils/ray_utils.glsl"
// Complex includes involved here
#include "ray_tracing/hit_record.glsl"
#include "ray_tracing/material.glsl"
#include "ray_tracing/sphere.glsl"
#include "world_gen.glsl"

HitRecord check_world(in Ray ray, in Sphere[MAX_SPHERES] spheres) {
    float closest_so_far = 1000.0;
    HitRecord closest_hit_record = NO_HIT;
    for (int i = 0; i < MAX_SPHERES; i++) {
        HitRecord hit_record = sphere_hit(spheres[i], ray);
        if (hit_record.time > 0.0) {
            if (hit_record.time < closest_so_far) {
                closest_so_far = hit_record.time;
                closest_hit_record = hit_record;
            }
        }
    }

    return closest_hit_record;
}

vec3 get_color(in Ray ray, in Sphere[MAX_SPHERES] spheres) {
    vec3 color = vec3(1.0);

    int total_bounces = 0;
    Ray current_ray = ray;
    for (int i = 0; i < MAX_BOUNCES; i++) {
        HitRecord closest_hit = check_world(current_ray, spheres);
        total_bounces++;

        if (closest_hit == NO_HIT) {
            color *= sky_color(ray);
            break;
        }

        float hit_time = closest_hit.time;
        if (hit_time > 0.0) {
            Ray scattered_ray;
            vec3 attenuation;

            Material material = closest_hit.material;
            int material_type = material.material_type;
            bool scattered;
            if (material_type == LAMBERTIAN) {
                scattered = scatter_lambertian(current_ray, closest_hit, material, attenuation, scattered_ray);
            } else if (material_type == METAL) {
                scattered = scatter_metal(current_ray, closest_hit, material, attenuation, scattered_ray);
            } else if (material_type == DIELECTRIC) {
                scattered = scatter_dielectric(current_ray, closest_hit, material, attenuation, scattered_ray);
            } else if (material_type == DISCO) {
                scattered = scatter_disco(current_ray, closest_hit, material, attenuation, scattered_ray);
            } else if (material_type == CHECKER_BOARD) {
                scattered = scatter_checker_board(current_ray, closest_hit, material, attenuation, scattered_ray);
            } else {
                break;
            }

            if (scattered) {
                color *= attenuation;
                current_ray = scattered_ray;
            }
        }
    }

    return color;
}

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixel = vec2(pixel_coords) / resolution;
    pixel.y = 1.0 - pixel.y;

    Sphere spheres[MAX_SPHERES] = setup_scene(vec2(12.51, 8.63));

    vec3 color = vec3(0.0);
    for (int i = 0; i < SAMPLE_PER_PIXEL; i++) {
        vec2 random_offset = random_vec2(pixel + i) * 0.5 / resolution;
        vec2 offset = pixel + random_offset;
        vec2 defocus_offset = random_timed_vec2_in_circle(pixel);
        Ray ray = camera_ray(offset, resolution, time, defocus_offset);
        color += get_color(ray, spheres);
    }

    vec3 final_color = color / SAMPLE_PER_PIXEL;
    final_color = pow(final_color, vec3(1.0 / 2.2));

    //    imageStore(screen, pixel_coords, vec4(final_color, 1.0));

    // Get previous frame color
    vec3 prev_color = imageLoad(screen, pixel_coords).rgb;

    // Get the difference between the two colors
    vec3 difference = abs(final_color - prev_color);
    float difference_sum = length(difference) / sqrt(3.0);
    float final_sum = length(final_color) / sqrt(3.0);

    float frame_count = imageLoad(frame_counter, pixel_coords).r * MAX_FRAMES;
    if (difference_sum > 1000.2) {
        // If the difference is greater than 0.01, we will reset the pixel
        imageStore(screen, pixel_coords, vec4(final_color, 1.0));

        frame_count = 0.0;
    } else {
        float scale = 1.0 / MAX_FRAMES;
        float x = frame_count * frame_count;
        vec3 blended_color = mix(final_color, prev_color, (scale * x) / (scale * x + 1.0));
        //        if (final_sum <= 1.0) {
        //            blended_color = prev_color;
        //            frame_count -= 1.0;
        //        }

        // If the difference is less than 0.01, we will blend the accumulated color and the current color
        imageStore(screen, pixel_coords, vec4(blended_color, 1.0));

        frame_count += 1.0;
    }

    // Write the frame count to the frame_counter image
    if (frame_count > MAX_FRAMES) {
        frame_count = MAX_FRAMES;
    }
    float final_frame_count = frame_count / MAX_FRAMES;
    //    float final_frame_count = difference_sum > 0.25 ? 0.0 : 1.0;
    imageStore(frame_counter, pixel_coords, vec4(final_frame_count, 0.0, 0.0, 1.0));
}